# -*- coding: utf-8 -*-
"""Untitled49.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AcainusL1mAsk9m7YHtsEyDBDfXVP1ql
"""

import json
import numpy as np
from flask import Flask, request, jsonify
from flask_cors import CORS
import PyPDF2
import io
import re
import tensorflow as tf
from sklearn.feature_extraction.text import TfidfVectorizer
import pandas as pd
import os

app = Flask(__name__)
CORS(app)

VALID_SKILLS_FILE = "valid_skills.json"

# --- Load Model and Vectorizer ---
try:
    model = tf.keras.models.load_model('matching_model.h5')
    with open('tfidf_vectorizer.json', 'r') as f:
        vectorizer_data = json.load(f)
        vectorizer = TfidfVectorizer(**vectorizer_data)
except Exception as e:
    print(f"Error loading model or vectorizer: {e}")
    # Jangan jalankan app.run() di sini, biarkan di bagian akhir file


def load_valid_skills():
    try:
        with open(VALID_SKILLS_FILE, 'r') as f:
            return set(json.load(f))
    except FileNotFoundError:
        with open(VALID_SKILLS_FILE, 'w') as f:
            json.dump([], f)
        return set()


def save_valid_skills(skills):
    with open(VALID_SKILLS_FILE, 'w') as f:
        json.dump(list(skills), f)


def extract_text_from_pdf(pdf_file):
    try:
        pdf_reader = PyPDF2.PdfReader(io.BytesIO(pdf_file.read()))
        text = ""
        for page in pdf_reader.pages:
            text += page.extract_text()
        text = re.sub(r'[^\w\s]', '', text).lower()  # Cleaning
        return text
    except PyPDF2.errors.PdfReadError:
        return "Error: Could not read PDF file."
    except Exception as e:
        return f"Error extracting text: {e}"


def extract_skills_from_text(text, keyword_list):
    words = text.split()
    found_skills = [word for word in words if word in keyword_list]
    return list(set(found_skills))


def handle_pdf_upload(file):
    if 'file' not in request.files:
        return jsonify({'error': 'No file part'}), 400
    if not file or not file.filename.endswith(('.pdf', '.PDF')):
        return jsonify({'error': 'Invalid file type'}), 400
    return file


@app.route('/preprocess_cv', methods=['POST'])
def preprocess_cv():
    file = handle_pdf_upload(request.files)
    if isinstance(file, tuple):
        return file

    try:
        text = extract_text_from_pdf(file)
        if isinstance(text, str) and "Error" in text:
            return jsonify({'error': text}), 500
        valid_skills = load_valid_skills()
        skills = extract_skills_from_text(text, valid_skills)
        return jsonify({'text': text, 'skills': skills}), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500


@app.route('/extract_skills', methods=['POST'])
def extract_skills():
    file = handle_pdf_upload(request.files)
    if isinstance(file, tuple):
        return file

    try:
        valid_skills = load_valid_skills()
        text = extract_text_from_pdf(file)
        if isinstance(text, str) and "Error" in text:
            return jsonify({'error': text}), 500
        skills = extract_skills_from_text(text, valid_skills)
        new_skills = set(skills) - valid_skills
        if new_skills:
            valid_skills.update(new_skills)
            save_valid_skills(valid_skills)
        return jsonify({'skills': list(skills)}), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500


@app.route('/recommend_jobs', methods=['POST'])
def recommend_jobs_api():
    try:
        data = request.get_json()
        cv_skills = data.get('cv_skills')
        jobs_data = data.get('jobs')

        if not cv_skills or not jobs_data:
            return jsonify({'error': 'CV skills and jobs data are required'}), 400

        df_jobs = pd.DataFrame(jobs_data)
        if not all(col in df_jobs.columns for col in ['skills_needed_str', 'job_link']):
            return jsonify({'error': 'Jobs data must contain "skills_needed_str" and "job_link" columns'}), 400

        recommended_jobs = recommend_jobs(cv_skills, df_jobs, model, vectorizer)
        return jsonify({'recommended_jobs': recommended_jobs}), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500


def recommend_jobs(cv_skills, df_jobs, model, vectorizer):
    try:
        cv_vector = vectorizer.transform([cv_skills]).toarray()
        all_job_vectors = vectorizer.transform(df_jobs['skills_needed_str']).toarray()

        combined_vectors = np.concatenate((np.tile(cv_vector, (len(df_jobs), 1)), all_job_vectors), axis=1)

        scores = model.predict(combined_vectors).flatten()
        sorted_indices = np.argsort(scores)[::-1]
        top_3_indices = sorted_indices[:3]
        recommended_job_links = df_jobs.iloc[top_3_indices]['job_link'].tolist()
        return recommended_job_links
    except Exception as e:
        return f"Error in recommendation function: {e}"


if __name__ == '__main__':
    app.run(debug=True, host="0.0.0.0", port=int(os.environ.get("PORT", 8080)))